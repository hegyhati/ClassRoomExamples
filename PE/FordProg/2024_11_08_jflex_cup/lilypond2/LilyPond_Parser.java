
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LilyPond_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public LilyPond_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LilyPond_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LilyPond_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\007\002\000\002\002\004\000\002\002" +
    "\004\000\002\010\002\000\002\003\005\000\002\003\002" +
    "\000\002\004\005\000\002\005\003\000\002\005\002\000" +
    "\002\006\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\006\002\001\004\001\001\002\000\006\002" +
    "\ufffc\004\011\001\002\000\004\002\006\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002\000\012\002\ufff9\004\ufff9\005\012" +
    "\006\ufff9\001\002\000\010\002\ufffa\004\ufffa\006\ufffa\001" +
    "\002\000\010\002\ufff7\004\ufff7\006\014\001\002\000\006" +
    "\002\ufff8\004\ufff8\001\002\000\006\002\ufffb\004\ufffb\001" +
    "\002\000\006\002\ufffc\004\011\001\002\000\004\002\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\006\002\004\007\003\001\001\000\006\003" +
    "\006\004\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\015\001\001\000\004\005" +
    "\012\001\001\000\002\001\001\000\004\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\016\004" +
    "\007\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LilyPond_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LilyPond_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LilyPond_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Float lastDuration = null;
    Float totalDuration = Float.valueOf(0);


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LilyPond_Parser$actions {
  private final LilyPond_Parser parser;

  /** Constructor */
  CUP$LilyPond_Parser$actions(LilyPond_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LilyPond_Parser$do_action_part00000000(
    int                        CUP$LilyPond_Parser$act_num,
    java_cup.runtime.lr_parser CUP$LilyPond_Parser$parser,
    java.util.Stack            CUP$LilyPond_Parser$stack,
    int                        CUP$LilyPond_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LilyPond_Parser$result;

      /* select the action based on the action number */
      switch (CUP$LilyPond_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Float RESULT =null;
 System.out.println("Start of piece"); 
              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // foo ::= NT$0 notes 
            {
              Float RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Float) ((java_cup.runtime.Symbol) CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-1)).value;
		 System.out.println("End of piece, duration:" + String.valueOf(totalDuration)); 
              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("foo",0, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= foo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-1)).right;
		Float start_val = (Float)((java_cup.runtime.Symbol) CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-1)).value;
		RESULT = start_val;
              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LilyPond_Parser$parser.done_parsing();
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Float RESULT =null;
 System.out.println("New note"); 
              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // notes ::= note NT$1 notes 
            {
              Float RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Float) ((java_cup.runtime.Symbol) CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-1)).value;

              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("notes",1, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // notes ::= 
            {
              Float RESULT =null;

              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("notes",1, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // note ::= NOTE octave duration 
            {
              Float RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$LilyPond_Parser$stack.peek()).value;
		
    lastDuration = d.floatValue();
    totalDuration += d.floatValue();

              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("note",2, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.elementAt(CUP$LilyPond_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // octave ::= OCTAVE 
            {
              Float RESULT =null;

              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("octave",3, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // octave ::= 
            {
              Float RESULT =null;

              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("octave",3, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // duration ::= DURATION 
            {
              Float RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$LilyPond_Parser$stack.peek()).value;
		 
    RESULT = 1 / d.floatValue();

              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("duration",4, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // duration ::= 
            {
              Float RESULT =null;
		
    if (lastDuration == null) {
        RESULT = 0.25f;
    } else {
        RESULT = lastDuration;
    }

              CUP$LilyPond_Parser$result = parser.getSymbolFactory().newSymbol("duration",4, ((java_cup.runtime.Symbol)CUP$LilyPond_Parser$stack.peek()), RESULT);
            }
          return CUP$LilyPond_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LilyPond_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LilyPond_Parser$do_action(
    int                        CUP$LilyPond_Parser$act_num,
    java_cup.runtime.lr_parser CUP$LilyPond_Parser$parser,
    java.util.Stack            CUP$LilyPond_Parser$stack,
    int                        CUP$LilyPond_Parser$top)
    throws java.lang.Exception
    {
              return CUP$LilyPond_Parser$do_action_part00000000(
                               CUP$LilyPond_Parser$act_num,
                               CUP$LilyPond_Parser$parser,
                               CUP$LilyPond_Parser$stack,
                               CUP$LilyPond_Parser$top);
    }
}

}
